# contain init db, app without data
# images are downloaded from docker hub, supports many api
# run command: docker compose -f .\docker-compose-init.yml up -d --scale api=<number_api>
# run admin-seed-tool command: docker-compose -f .\docker-compose-init.yml run --rm seed-admin-tool

services:
  client:
    image: turbo821/resident-guardian-client:06-01
    depends_on:
      - loadbalancer
    ports:
      - "80:80"

  loadbalancer:
    image: nginx:alpine
    ports:
      - "8080:80"
    volumes:
      - ./nginx-loadbalancer.conf:/etc/nginx/nginx.conf
    depends_on:
      - api

  api:
    image: turbo821/resident-guardian-api:06-08
    user: "0:0"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ALLOWED_ORIGINS=http://client:3000,http://client:80,https://client:443,https://client:3000
      - CONNECTION_STRING=Host=database;Port=5432;Database=reguan_db;Username=postgres;Password=postgres
      - REDIS_HOST=redis:6379
      - YandexStorageOptions__BucketName=your-bucket
      - YandexStorageOptions__ServiceUrl=https://storage.yandexcloud.net
      - YandexStorageOptions__AccessKey=your-access-key
      - YandexStorageOptions__SecretKey=your-secret-key

    volumes:
      - uploads_data:/app/wwwroot/upload
    depends_on:
      - database
    ports:
      - "8080"
      - "8081"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/health"]
      interval: 10s
      timeout: 5s
      retries: 3

  seed-admin-tool:
    image: turbo821/resident-guardian-seed-admin-tool:05-10
    depends_on:
      database:
        condition: service_healthy
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - CONNECTION_STRING=Host=database;Port=5432;Database=reguan_db;Username=postgres;Password=postgres
    stdin_open: true
    tty: true

  database:
    image: postgis/postgis:16-3.5-alpine
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: reguan_db
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d reguan_db"]
      interval: 5s
      timeout: 5s
      retries: 10
    volumes:
      - ./postgres_data:/var/lib/postgresql/data
      - ./reguan_db_create_tables.sql:/docker-entrypoint-initdb.d/reguan_db.sql
    ports:
      - "5432"

  redis:
    image: redis:7.4.2
    ports:
      - "6379:6379"
    restart: unless-stopped

volumes:
  uploads_data: